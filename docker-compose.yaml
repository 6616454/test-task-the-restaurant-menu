version: '3.8'


services:
  db:
    image: postgres:15.1-alpine
    restart: on-failure
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 20s
      retries: 100
    networks:
      custom:

  cache:
    image: redis:latest
    restart: on-failure
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      custom:

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    container_name: fastapi-app
    restart: on-failure
    ports:
      - "${APP_PORT}:8000"
    env_file:
      - .env
    volumes:
      - celery-data:/app/data
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
      worker:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      custom:

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: "rabbitmq"
    hostname: rabbitmqhost
    restart: always
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_PORT2}:15672"
    env_file:
      .env
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 10
    networks:
      custom:

  worker:
    container_name: "celery"
    build: .
    command: celery --app src.presentation.celery.app worker --loglevel=INFO
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - celery-data:/app/data
    networks:
      custom:

networks:
  custom:
    driver: bridge

volumes:
  celery-data:
